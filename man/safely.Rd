% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/output.R
\name{safely}
\alias{safely}
\alias{quietly}
\alias{possibly}
\alias{persistently}
\alias{auto_browse}
\title{Capture side effects.}
\usage{
safely(.f, otherwise = NULL, quiet = TRUE)

quietly(.f)

possibly(.f, otherwise, quiet = TRUE)

persistently(.f, quiet = TRUE, max_attempts = 5, wait_seconds = 0)

auto_browse(.f)
}
\arguments{
\item{.f}{A function, formula, or atomic vector.

If a \strong{function}, it is used as is.

If a \strong{formula}, e.g. \code{~ .x + 2}, it is converted to a function. There
are three ways to refer to the arguments:
\itemize{
\item For a single argument function, use \code{.}
\item For a two argument function, use \code{.x} and \code{.y}
\item For more arguments, use \code{..1}, \code{..2}, \code{..3} etc
}

This syntax allows you to create very compact anonymous functions.

If \strong{character vector}, \strong{numeric vector}, or \strong{list}, it
is converted to an extractor function. Character vectors index by name
and numeric vectors index by position; use a list to index by position
and name at different levels. Within a list, wrap strings in \code{get_attr()}
to extract named attributes. If a component is not present, the value of
\code{.default} will be returned.}

\item{otherwise}{Default value to use when an error occurs.}

\item{quiet}{Hide errors (\code{TRUE}, the default), or display them
as they occur?}

\item{max_attempts}{Positive integer. Functions wrapped by \code{persistently()}
will try to run this many times before giving up.}

\item{wait_seconds}{Positive number. Base multiplier for time in seconds to
wait between attempts. The time increases exponentially, with a wait time
randomly chosen from a uniform distribution between \code{0} and
\code{wait_seconds * 2 ^ (i - 1)} seconds, between the \code{i}th and
\code{i + 1}th attempts.}
}
\value{
\code{safely}: wrapped function instead returns a list with
components \code{result} and \code{error}. One value is always \code{NULL}.

\code{quietly}: wrapped function instead returns a list with components
\code{result}, \code{output}, \code{messages} and \code{warnings}.

\code{possibly}: wrapped function uses a default value (\code{otherwise})
whenever an error occurs.

\code{persistently}: wrapped function attempts to run \code{max_attempts}
times; an error occurs if all attempts fail.
}
\description{
These functions wrap functions so that instead of generating side effects
through printed output, messages, warnings, and errors, they return enhanced
output. They are all adverbs because they modify the action of a verb (a
function).
}
\examples{
safe_log <- safely(log)
safe_log(10)
safe_log("a")

list("a", 10, 100) \%>\%
  map(safe_log) \%>\%
  transpose()

# This is a bit easier to work with if you supply a default value
# of the same type and use the simplify argument to transpose():
safe_log <- safely(log, otherwise = NA_real_)
list("a", 10, 100) \%>\%
  map(safe_log) \%>\%
  transpose() \%>\%
  simplify_all()

# To replace errors with a default value, use possibly().
list("a", 10, 100) \%>\%
  map_dbl(possibly(log, NA_real_))

# persistently() makes a function repeatedly try to work
risky_runif <- function(lo = 0, hi = 1) {
  y <- runif(1, lo, hi)
  if(y < 0.9) {
    stop(y, " is too small")
  }
  y
}

persistent_risky_runif <-
  persistently(risky_runif, quiet = FALSE, wait_seconds = 0.01)

set.seed(1)
persistent_risky_runif()
set.seed(3)
persistent_risky_runif()

# The adverb persistently() acts independently from safely() and
# possibly(). Thus, you can combine adverbs to get the behaviour you want.
#
possible_persistent_risky_runif <-
  possibly(
    persistently(risky_runif, quiet = FALSE, wait_seconds = 0.01),
    otherwise = -99
  )

set.seed(1)
possible_persistent_risky_runif()
set.seed(3)
possible_persistent_risky_runif()

# For interactive usage, auto_browse() is useful because it automatically
# starts a browser() in the right place.
f <- function(x) {
  y <- 20
  if (x > 5) {
    stop("!")
  } else {
    x
  }
}
if (interactive()) {
  map(1:6, auto_browse(f))
}

# It doesn't make sense to use auto_browse with primitive functions,
# because they are implemented in C so there's no useful environment
# for you to interact with.
}
\seealso{
\code{\link[httr:RETRY]{httr::RETRY()}} is a special case of \code{\link[=persistently]{persistently()}}
for HTTP verbs.
}
